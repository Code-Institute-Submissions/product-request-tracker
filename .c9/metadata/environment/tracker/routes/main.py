{"filter":false,"title":"main.py","tooltip":"/tracker/routes/main.py","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":200,"column":45},"end":{"row":201,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":201,"column":0},"end":{"row":201,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":201,"column":0},"end":{"row":201,"column":4},"action":"remove","lines":["    "],"id":5}],[{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["",""],"id":6}],[{"start":{"row":8,"column":0},"end":{"row":202,"column":0},"action":"remove","lines":["main = Blueprint('main', __name__)","","@main.route('/')","def index():","    posts = Posts.query.filter(Posts.complete == False).order_by(Posts.date_posted.desc()).all()","","    context = {","        'posts': posts,","    }","    if not posts:","        flash(\"There are no outstanding Requests!\", 'information')","","    return render_template('index.html', **context)","","","@main.route('/archives')","def archives():","    posts = Posts.query.filter(Posts.complete == True).order_by(Posts.date_posted.desc()).all()","","    context = {","        'posts': posts,","    }","    if not posts:","        flash(\"There are no archived Requests!\", 'information')","","    return render_template('archives.html', **context)","","","@main.route('/new', methods=['GET', 'POST'])","@login_required","def add_request():","    if request.method == 'POST':","","        new_request = request.form.to_dict()","        new_request[\"user_id\"] = current_user.id","        product_type = request.form[\"product_type\"]","        new_request[\"product_type\"] = \"media/img/{}.jpg\".format(product_type)","","        try:","            new = new_request[\"new_product\"]","            new_request[\"new_product\"] = True if new == \"on\" else False","            new_request.pop('new_product', None)","        except:","            new_request[\"new_product\"] = False","","        new_request = Posts(**new_request)","        db.session.add(new_request)","        db.session.commit()","","        flash('New request added!', 'success')","        return redirect(url_for('main.index'))","","    suppliers = Suppliers.query.filter(Suppliers.display == True).all()","","    context = {","        'suppliers': suppliers,","    }","    return render_template('request_add.html', **context)","","","@main.route('/edit/<int:post_id>', methods=['GET', 'POST'])","@login_required","def edit_request(post_id):","    post = Posts.query.get_or_404(post_id)","    if request.method == 'POST':","","        post.title = request.form[\"title\"]","        post.content = request.form[\"content\"]","        post.supplier_id = request.form[\"supplier_id\"]","        post.contact_name = request.form[\"contact_name\"]","        post.product_number = request.form[\"product_number\"]","        post.product_name = request.form[\"product_name\"]","        product_type = request.form[\"product_type\"]","        post.product_type = \"media/img/{}.jpg\".format(product_type)","","        post.product_length = request.form[\"product_length\"]","        post.product_width = request.form[\"product_width\"]","        post.product_height = request.form[\"product_height\"]","        post.product_weight = request.form[\"product_weight\"]","        post.units_per_case = request.form[\"units_per_case\"]","        post.inners_per_case = request.form[\"inners_per_case\"]","","        post.ex_product_length = request.form[\"ex_product_length\"]","        post.ex_product_width = request.form[\"ex_product_width\"]","        post.ex_product_height = request.form[\"ex_product_height\"]","        post.ex_product_weight = request.form[\"ex_product_weight\"]","        post.ex_units_per_case = request.form[\"ex_units_per_case\"]","        post.ex_inners_per_case = request.form[\"ex_inners_per_case\"]","","        # New Product Check Box","        try:","            new = request.form[\"new_product\"]","            post.new_product = True if new == \"on\" else False","        except:","            post.new_product = False","","        # Existing Product Orientation","        try:","            ex_case_orientation = request.form[\"ex_case_orientation\"]","            post.ex_case_orientation = True if ex_case_orientation == \"on\" else False","        except:","            post.ex_case_orientation = False","","        # New Product Orientation","        try:","            case_orientation = request.form[\"ex_case_orientation\"]","            post.case_orientation = True if case_orientation == \"on\" else False","        except:","            post.case_orientation = False","","        db.session.commit()","","        flash('The request has been editted.', 'success')","        return redirect(url_for('main.index'))","","    suppliers = Suppliers.query.filter(Suppliers.display == True).all()","","    context = {","        'suppliers': suppliers,","        'post': post","    }","    return render_template('request_edit.html', **context)","","","@main.route('/outputform/<int:post_id>', methods=['GET', 'POST'])","def output_form(post_id):","    post = Posts.query.get_or_404(post_id)","    health_and_safety = Actions.query.filter(Actions.stage == 1, Actions.posts_id == post_id).order_by(Actions.created_on.desc()).first()","    quality = Actions.query.filter(Actions.stage == 2, Actions.posts_id == post_id).order_by(Actions.created_on.desc()).first()","    cagefill = Actions.query.filter(Actions.stage == 3, Actions.posts_id == post_id).order_by(Actions.created_on.desc()).first()","    restaurant_impact = Actions.query.filter(Actions.stage == 4, Actions.posts_id == post_id).order_by(Actions.created_on.desc()).first()","","    context = {","        'post': post,","        'health_and_safety': health_and_safety,","        'quality': quality,","        'cagefill': cagefill,","        'restaurant_impact': restaurant_impact","    }","","    return render_template('output_form.html', **context)","","","@main.route('/complete/<int:post_id>/<status>')","@login_required","def complete_request(post_id, status):","","    post = Posts.query.get_or_404(post_id)","    if post.healthandsafety in (0, 2):","        flash(\"Please complete Health and Safety for {}.\".format(post.title), 'error')","        return redirect(url_for('main.index'))","    elif post.quality in (0, 2):","        flash(\"Please complete Quality for {}.\".format(post.title), 'error')","        return redirect(url_for('main.index'))","    elif post.cagefill in (0, 2):","        flash(\"Please complete Cage Fill for {}.\".format(post.title), 'error')","        return redirect(url_for('main.index'))","    elif post.restaurantimpact in (0, 2):","        flash(\"Please complete Restaurant Impact for {}.\".format(post.title), 'error')","        return redirect(url_for('main.index'))","","    post.status = status","    db.session.commit()","","    flash('Request Status updated to {}'.format(post.status), 'success')","    return redirect(url_for('main.index'))","","","@main.route('/archive/<int:post_id>')","@login_required","def archive_request(post_id):","","    post = Posts.query.get_or_404(post_id)","    if post.status == None:","        flash(\"Please ensure the Request is complete\", 'error')","        return redirect(url_for('main.index'))","","    post.complete = True","    db.session.commit()","","    flash('Request {} has been moved to the Archives'.format(post.title), 'success')","    return redirect(url_for('main.index'))","","","@main.route('/unarchive/<int:post_id>')","@login_required","def unarchive_request(post_id):","","    post = Posts.query.get_or_404(post_id)","    post.complete = False","    db.session.commit()","","    flash('Request {} has been moved back to the Tracker'.format(post.title), 'success')","    return redirect(url_for('main.archives'))",""],"id":7},{"start":{"row":8,"column":0},"end":{"row":218,"column":0},"action":"insert","lines":["#!/usr/bin/python","# -*- coding: utf-8 -*-","main = Blueprint('main', __name__)","","","@main.route('/')","def index():","    posts = Posts.query.filter(Posts.complete","                               is False).order_by(Posts.date_posted.desc()).all()","","    context = {'posts': posts}","    if not posts:","        flash('There are no outstanding Requests!', 'information')","","    return render_template('index.html', **context)","","","@main.route('/archives')","def archives():","    posts = Posts.query.filter(Posts.complete","                               is True).order_by(Posts.date_posted.desc()).all()","","    context = {'posts': posts}","    if not posts:","        flash('There are no archived Requests!', 'information')","","    return render_template('archives.html', **context)","","","@main.route('/new', methods=['GET', 'POST'])","@login_required","def add_request():","    if request.method == 'POST':","","        new_request = request.form.to_dict()","        new_request['user_id'] = current_user.id","        product_type = request.form['product_type']","        new_request['product_type'] = \\","            'media/img/{}.jpg'.format(product_type)","","        try:","            new = new_request['new_product']","            new_request['new_product'] = (True if new == 'on'","                     else False)","            new_request.pop('new_product', None)","        except:","            new_request['new_product'] = False","","        new_request = Posts(**new_request)","        db.session.add(new_request)","        db.session.commit()","","        flash('New request added!', 'success')","        return redirect(url_for('main.index'))","","    suppliers = Suppliers.query.filter(Suppliers.display == True).all()","","    context = {'suppliers': suppliers}","    return render_template('request_add.html', **context)","","","@main.route('/edit/<int:post_id>', methods=['GET', 'POST'])","@login_required","def edit_request(post_id):","    post = Posts.query.get_or_404(post_id)","    if request.method == 'POST':","","        post.title = request.form['title']","        post.content = request.form['content']","        post.supplier_id = request.form['supplier_id']","        post.contact_name = request.form['contact_name']","        post.product_number = request.form['product_number']","        post.product_name = request.form['product_name']","        product_type = request.form['product_type']","        post.product_type = 'media/img/{}.jpg'.format(product_type)","","        post.product_length = request.form['product_length']","        post.product_width = request.form['product_width']","        post.product_height = request.form['product_height']","        post.product_weight = request.form['product_weight']","        post.units_per_case = request.form['units_per_case']","        post.inners_per_case = request.form['inners_per_case']","","        post.ex_product_length = request.form['ex_product_length']","        post.ex_product_width = request.form['ex_product_width']","        post.ex_product_height = request.form['ex_product_height']","        post.ex_product_weight = request.form['ex_product_weight']","        post.ex_units_per_case = request.form['ex_units_per_case']","        post.ex_inners_per_case = request.form['ex_inners_per_case']","","        # New Product Check Box","","        try:","            new = request.form['new_product']","            post.new_product = (True if new == 'on' else False)","        except:","            post.new_product = False","","        # Existing Product Orientation","","        try:","            ex_case_orientation = request.form['ex_case_orientation']","            post.ex_case_orientation = (True if ex_case_orientation","                    == 'on' else False)","        except:","            post.ex_case_orientation = False","","        # New Product Orientation","","        try:","            case_orientation = request.form['ex_case_orientation']","            post.case_orientation = (True if case_orientation == 'on'","                     else False)","        except:","            post.case_orientation = False","","        db.session.commit()","","        flash('The request has been editted.', 'success')","        return redirect(url_for('main.index'))","","    suppliers = Suppliers.query.filter(Suppliers.display is True).all()","","    context = {'suppliers': suppliers, 'post': post}","    return render_template('request_edit.html', **context)","","","@main.route('/outputform/<int:post_id>', methods=['GET', 'POST'])","def output_form(post_id):","    post = Posts.query.get_or_404(post_id)","    health_and_safety = Actions.query.filter(Actions.stage == 1,","            Actions.posts_id","            == post_id).order_by(Actions.created_on.desc()).first()","    quality = Actions.query.filter(Actions.stage == 2, Actions.posts_id","                                   == post_id).order_by(Actions.created_on.desc()).first()","    cagefill = Actions.query.filter(Actions.stage == 3,","                                    Actions.posts_id","                                    == post_id).order_by(Actions.created_on.desc()).first()","    restaurant_impact = Actions.query.filter(Actions.stage == 4,","            Actions.posts_id","            == post_id).order_by(Actions.created_on.desc()).first()","","    context = {","        'post': post,","        'health_and_safety': health_and_safety,","        'quality': quality,","        'cagefill': cagefill,","        'restaurant_impact': restaurant_impact,","        }","","    return render_template('output_form.html', **context)","","","@main.route('/complete/<int:post_id>/<status>')","@login_required","def complete_request(post_id, status):","","    post = Posts.query.get_or_404(post_id)","    if post.healthandsafety in (0, 2):","        flash('Please complete Health and Safety for {}.'.format(post.title),","              'error')","        return redirect(url_for('main.index'))","    elif post.quality in (0, 2):","        flash('Please complete Quality for {}.'.format(post.title),","              'error')","        return redirect(url_for('main.index'))","    elif post.cagefill in (0, 2):","        flash('Please complete Cage Fill for {}.'.format(post.title),","              'error')","        return redirect(url_for('main.index'))","    elif post.restaurantimpact in (0, 2):","        flash('Please complete Restaurant Impact for {}.'.format(post.title),","              'error')","        return redirect(url_for('main.index'))","","    post.status = status","    db.session.commit()","","    flash('Request Status updated to {}'.format(post.status), 'success')","    return redirect(url_for('main.index'))","","","@main.route('/archive/<int:post_id>')","@login_required","def archive_request(post_id):","","    post = Posts.query.get_or_404(post_id)","    if post.status is None:","        flash('Please ensure the Request is complete', 'error')","        return redirect(url_for('main.index'))","","    post.complete = True","    db.session.commit()","","    flash('Request {} has been moved to the Archives'.format(post.title),","          'success')","    return redirect(url_for('main.index'))","","","@main.route('/unarchive/<int:post_id>')","@login_required","def unarchive_request(post_id):","","    post = Posts.query.get_or_404(post_id)","    post.complete = False","    db.session.commit()","","    flash('Request {} has been moved back to the Tracker'.format(post.title),","          'success')","    return redirect(url_for('main.archives'))",""]}],[{"start":{"row":8,"column":0},"end":{"row":9,"column":23},"action":"remove","lines":["#!/usr/bin/python","# -*- coding: utf-8 -*-"],"id":8},{"start":{"row":7,"column":0},"end":{"row":8,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":13,"column":45},"end":{"row":13,"column":46},"action":"insert","lines":[" "],"id":9}],[{"start":{"row":13,"column":46},"end":{"row":14,"column":0},"action":"remove","lines":["",""],"id":10}],[{"start":{"row":13,"column":46},"end":{"row":13,"column":77},"action":"remove","lines":["                               "],"id":11},{"start":{"row":13,"column":46},"end":{"row":13,"column":47},"action":"remove","lines":["i"]},{"start":{"row":13,"column":46},"end":{"row":13,"column":47},"action":"remove","lines":["s"]}],[{"start":{"row":13,"column":46},"end":{"row":13,"column":47},"action":"insert","lines":["="],"id":12},{"start":{"row":13,"column":47},"end":{"row":13,"column":48},"action":"insert","lines":["="]}],[{"start":{"row":126,"column":56},"end":{"row":126,"column":60},"action":"remove","lines":[" is "],"id":13},{"start":{"row":126,"column":56},"end":{"row":126,"column":60},"action":"insert","lines":[" == "]}],[{"start":{"row":192,"column":18},"end":{"row":192,"column":22},"action":"remove","lines":[" is "],"id":14},{"start":{"row":192,"column":18},"end":{"row":192,"column":22},"action":"insert","lines":[" == "]}],[{"start":{"row":25,"column":30},"end":{"row":25,"column":34},"action":"remove","lines":[" is "],"id":15},{"start":{"row":25,"column":30},"end":{"row":25,"column":34},"action":"insert","lines":[" == "]}]]},"ace":{"folds":[],"scrolltop":2321.5,"scrollleft":0,"selection":{"start":{"row":210,"column":23},"end":{"row":210,"column":23},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":164,"state":"start","mode":"ace/mode/python"}},"timestamp":1579612373339,"hash":"4a4fc38616a7978e6a8c296db5a76a505d91395d"}